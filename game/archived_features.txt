
-- Player classes
    current as of: dev 0.0.21
    located under Fighter class in players.py

class Mage(Player):
    def __init__(self, name, gender, hp, atk, xp, level, accuracy, col):
        super().__init__(name, gender, hp, atk, xp, level, accuracy, col)
        self.title = 'Mage'
        self.acu = .05 # attack acuracy modifier
        self.agi = 20 # used for battle order like a speed stat (out of 20?)
        self.mag = 25 # used to calculate skill cost
        self.maxmag = self.mag
        self.mod = 1 + self.level // 4
        self.spell_slots = 1
        self.known_spells = []
        self.spells = init_spells()
        self.known_spells.append(self.spells[0])
        self.inventory = Inventory()
        self.allies = []

    def attack(self, enemy, xp_thresholds):
        if self.auto_battle:
            if random.random() < self.accuracy:
                damage = self.atk - random.randint(0, self.atk // 4)
                enemy.hp -= damage
                dprint(f'{self.name} attacks {enemy.name} for {damage} damage!')
                if enemy.is_alive():
                    dprint(f'{enemy.name} has {enemy.hp} hp remaining.')
                else:
                    dprint(f'{self.name} has defeated {enemy.name}!')
                    self.gain_xp(enemy.xp, xp_thresholds)
                    self.gain_col(enemy.col)
                    enemy.drop(self)                
            else:
                dprint(f'{self.name} misses their attack!')
        else:
            dprint('Ready?', .05)
            time.sleep(.75)
            input()
            attack_value = attack_timing_window(*enemy.ac, self.accuracy)
            if attack_value > self.accuracy:
                damage = self.atk - random.randint(0, self.atk // 4)
                enemy.hp -= damage
                dprint(f'{self.name} attacks {enemy.name} for {damage} damage!')
                if enemy.is_alive():
                    dprint(f'{enemy.name} has {enemy.hp} hp remaining.')
                else:
                    dprint(f'{self.name} has defeated {enemy.name}!')
                    self.gain_xp(enemy.xp, xp_thresholds)
                    self.gain_col(enemy.col)
                    enemy.drop(self)                
            else:
                dprint(f'{self.name} misses their attack!')

    def gain_xp(self, xp, xp_thresholds:dict):
        dprint(f'{self.name} gained {xp} experience points, ')
        self.xp += xp
        # level_key_to_remove = None
        for level_key, threshold in xp_thresholds.items():
            if self.xp >= threshold:
                self.level = level_key + 1
                dprint(f'{self.name} has leveled up to level {self.level}!')
                self.level_up()
                level_key_to_remove = level_key
        try:
            xp_thresholds.pop(level_key_to_remove) # Remove the threshold we just crossed
        except UnboundLocalError as err:
            # print(f'it works to do nothing here : {err}')
            pass
        dprint(f'{self.name} now has {self.xp} xp. ')

    def level_up(self):
        self.maxhp += 3 + (self.level // 6)
        self.atk += (self.level // 5)
        self.accuracy += .0025 if self.accuracy < 1 else self.accuracy == 1
        self.hp = self.maxhp
        self.spell_slots = int(math.log(self.level + 6, 1.18) - 10)
        self.maxmag += 3 + (self.level // 6)
        self.agi -= ((self.level // 20) - 1)
        self.learn_spell()

    def special_attack(self, enemy, xp_thresholds):
        if self.mag <= 0:
            dprint('You\'re out of magic!')
            return self.attack(enemy, xp_thresholds)
        
        # update spell cooldown
        for spell in self.known_spells:
            if spell.downtime < spell.cooldown:
                spell.downtime += 1

        spell = self.choose_spell([spell for spell in self.known_spells if spell.is_usable()])
        if spell == None:
            dprint('No spells to use.')
            for spell in self.known_spells:
                print(f'Spell: {spell.name}, cooldown {spell.cooldown - spell.downtime} (turns remaining).')
            return self.attack(enemy, xp_thresholds)

        self.mag -= spell.cost
        strong_damage = self.atk + random.randint(1, (self.atk // 4) + 1) + spell.damage
        weak_damage = self.atk - random.randint(1, (self.atk // 4) + 1) + spell.damage

        spell.effect(enemy, self, weak_damage=weak_damage, strong_damage=strong_damage)
        if not enemy.is_alive():
            self.gain_xp(enemy.xp, xp_thresholds)
            self.gain_col(enemy.col)
            enemy.drop(self)

        elif spell.nature == 3: # escaping
            pass

    def learn_spell(self):
        spells = init_spells()
        learnables = [spell for spell in spells if spell.level <= self.level and spell.type == 1]
        while len(self.known_spells) < self.spell_slots:
            dprint('You have an available spell slot')
            dprint('would you like to learn or replace a spell?')
            lorp = ['learn', 'replace', 'nope'] # lorp: Learn or Replace
            for i in range(3):
                print(f'{i + 1}: {lorp[i]}')
            ans = input()
            if ans in ['0', '1', 'l', 'L', 'Learn', 'learn']: # if learn new
                self.add_spell(learnables)
            elif ans in ['2', 'r', 'R', 'replace', 'Replace', 'repl', 'Repl']: # if replace known
                self.remove_spell()
                self.add_spell(learnables)
            else:
                dprint('Ok maybe next time!')
                break
    
    def remove_spell(self):
        # dprint('Replace which spell? ') # ask
        spell_int = get_validated_input('replace which spell?', self.known_spells)
        self.known_spells.remove(self.known_spells[spell_int - 1]) # remove the chosen spell at valid position

    def add_spell(self, learnables):
        # dprint('Add which spell? ') # ask
        spell_int = get_validated_input('Add which spell?', learnables)
        self.known_spells.append(learnables[spell_int - 1]) # append the selected choice to known spells
        dprint(f'{self.name} has learned the spell {self.known_spells[-1].name}!')

    def choose_spell(self, spells):
        user = get_validated_input('Which spell do you want to use? ', spells)
        if user == None:
            return
        return self.known_spells[user - 1]
    
    def use_item(self, enemy, xp_thresholds):
        useables = [item for item in self.inventory.contents if item.can_use]
        if len(useables) != 0:
            list_int = get_validated_input('Which item?', list=useables)
            to_use = useables[list_int - 1]
            to_use.use(self, enemy, xp_thresholds)
            if to_use == 0:
                self.inventory.remove_item(to_use)
            else:
                self.inventory.contents[to_use] -= 1
        else:
            dprint('Your inventory is empty. ')

    def run(self):
        small = int((self.accuracy * 100) + (20 - self.agi))
        big = int(80 + self.agi)
        if random.randint(0, small) > random.randint(0, big):
            return True
        return False
    

class Pugilist(Player):
    def __init__(self, name, gender, hp, atk, xp, level, accuracy, col):
        super().__init__(name, gender, hp, atk, xp, level, accuracy, col)
        self.title = 'Pugilist'
        self.acu = .04 # attack acuracy modifier
        self.agi = 18 # used for battle order like a speed stat (out of 20?)
        self.mag = 10 # used to calculate skill cost
        self.maxmag = self.mag
        self.mod = 1 + self.level // 4
        self.spall_slots = 1
        self.known_spalls = []
        self.spalls = init_spalls()
        self.known_spalls.append(self.spalls[0])
        self.inventory = Inventory()
        self.allies = []

    def attack(self, enemy, xp_thresholds):
        if self.auto_battle:
            if random.random() < self.accuracy:
                damage = self.atk - random.randint(0, self.atk // 5)
                enemy.hp -= damage
                dprint(f'{self.name} hits {enemy.name} dealing {damage} damage!')
                if enemy.is_alive():
                    dprint(f'{enemy.name} has {enemy.hp} hp remaining.')
                else:
                    dprint(f'{self.name} has defeated {enemy.name}!')
                    self.gain_xp(enemy.xp, xp_thresholds)
                    self.gain_col(enemy.col)
                    enemy.drop(self)
            else:
                dprint(f'{self.name} misses their attack!')
        else:
            dprint('Ready?', .05)
            time.sleep(.75)
            input()
            attack_value = attack_timing_window(*enemy.ac, self.accuracy)
            if attack_value > self.accuracy:
                damage = self.atk - random.randint(0, self.atk // 5)
                enemy.hp -= damage
                dprint(f'{self.name} hits {enemy.name} dealing {damage} damage!')
                if enemy.is_alive():
                    dprint(f'{enemy.name} has {enemy.hp} hp remaining.')
                else:
                    dprint(f'{self.name} has defeated {enemy.name}!')
                    self.gain_xp(enemy.xp, xp_thresholds)
                    self.gain_col(enemy.col)
                    enemy.drop(self)
            else:
                dprint(f'{self.name} misses their attack!')

    def gain_xp(self, xp, xp_thresholds:dict):
        dprint(f'{self.name} gained {xp} experience points, ')
        self.xp += xp
        # level_key_to_remove = None
        for level_key, threshold in xp_thresholds.items():
            if self.xp >= threshold:
                self.level = level_key + 1
                dprint(f'{self.name} has leveled up to level {self.level}!')
                self.level_up()
                level_key_to_remove = level_key
        try:
            xp_thresholds.pop(level_key_to_remove) # Remove the threshold we just crossed
        except UnboundLocalError as err:
            # print(f'it works to do nothing here : {err}')
            pass
        dprint(f'{self.name} now has {self.xp} xp. ')

    def level_up(self):
        self.maxhp += 4 + (self.level // 5)
        self.atk += 1 + (self.level // 5)
        self.accuracy += .004 if self.accuracy < 1 else self.accuracy == 1
        self.hp = self.maxhp
        self.spall_slots = 1 + int(math.log(self.level, 1.7))
        self.maxmag += 1 + (self.level // 15)
        self.agi -= ((self.level // 8) - 1)
        self.learn_spall()

    def special_attack(self, enemy, xp_thresholds):
        if self.mag <= 0:
            dprint('You\'re out of magic!')
            return self.attack(enemy, xp_thresholds)
        
        # update spall downtime (this method requires that all action methods need these lines at the begining)
        for spall in self.known_spalls:
            if spall.downtime < spall.cooldown: # if downtime is less than cooldown
                spall.downtime += 1 # bring the 2 closer together

        # that way when this line comes along the number of usable spalls is accurate
        spall = self.choose_spall([spall for spall in self.known_spalls if spall.is_usable()])
        if spall == None:
            dprint('No spalls to use.')
            for spall in self.known_spalls:
                print(f'spall: {spall.name}, cooldown {spall.cooldown - spall.downtime} (turns remaining).')
            return self.attack(enemy, xp_thresholds)

        while not spall.is_usable():
            dprint('That spall is on cooldown.')
            spall = self.choose_spall([spall for spall in self.known_spalls if spall.is_usable()])

        attack_value = 0.0

        strong_damage = self.atk + random.randint(1, (self.atk // 5) + 1) + spall.damage
        weak_damage = self.atk - random.randint(1, (self.atk // 5) + 1)
        if self.auto_battle:
            self.mag -= spall.cost
            if random.random() < self.accuracy + self.acu:
                enemy.hp -= strong_damage
                spall.set_downtime() # downtime, to make sure the spalls aren't used too fast. 
                dprint(f'{self.name} delivers a powerful spall {spall.name}!')
                dprint(f'the attack hits {enemy.name} for {strong_damage} damage!')
                if enemy.is_alive():
                    dprint(f'{enemy.name} has {enemy.hp} hp remaining.')
                else:
                    dprint(f'{spall.name} absolutely annihilated {enemy.name}!')
                    self.gain_xp(enemy.xp, xp_thresholds)
                    self.gain_col(enemy.col)
                    enemy.drop(self)
            elif random.random() < self.accuracy:
                enemy.hp -= weak_damage
                spall.set_downtime() # downtime
                dprint(f'{self.name} dealt a weak hit of the spall {spall.name}.')
                dprint(f'The attack dealt {weak_damage} damage to {enemy.name}.')
                if enemy.is_alive():
                    dprint(f'{enemy.name} has {enemy.hp} hp remaining.')
                else:
                    dprint(f'Despite the weak hit with {spall.name}, {enemy.name} has died!')
                    self.gain_xp(enemy.xp, xp_thresholds)
                    self.gain_col(enemy.col)
                    enemy.drop(self)
            else:
                dprint(f'{self.name} executed the spall {spall.name} but missed! ')
                spall.set_downtime() # even though it was a miss, its still a use. 

        else:
            dprint('Ready?', .05)
            time.sleep(.75)
            input()
            attack_value = attack_timing_window(*enemy.ac, self.accuracy + self.acu)
            if attack_value > self.accuracy + self.acu:
                enemy.hp -= strong_damage
                spall.set_downtime() # downtime, to make sure the spalls aren't used too fast. 
                dprint(f'{self.name} delivers a powerful spall {spall.name}!')
                dprint(f'the attack hits {enemy.name} for {strong_damage} damage!')
                if enemy.is_alive():
                    dprint(f'{enemy.name} has {enemy.hp} hp remaining.')
                else:
                    dprint(f'{spall.name} absolutely annihilated {enemy.name}!')
                    self.gain_xp(enemy.xp, xp_thresholds)
                    self.gain_col(enemy.col)
                    enemy.drop(self)
            elif attack_value > self.accuracy:
                enemy.hp -= weak_damage
                spall.set_downtime() # downtime
                dprint(f'{self.name} dealt a weak hit of the spall {spall.name}.')
                dprint(f'The attack dealt {weak_damage} damage to {enemy.name}.')
                if enemy.is_alive():
                    dprint(f'{enemy.name} has {enemy.hp} hp remaining.')
                else:
                    dprint(f'Despite the weak hit with {spall.name}, {enemy.name} has died!')
                    self.gain_xp(enemy.xp, xp_thresholds)
                    self.gain_col(enemy.col)
                    enemy.drop(self)
            else:
                dprint(f'{self.name} executed the spall {spall.name} but missed! ')
                spall.set_downtime() # even though it was a miss, its still a use. 

    def learn_spall(self):
        spalls = init_spalls()
        learnables = [spall for spall in spalls if spall.level <= self.level and spall.type == 1]
        while len(self.known_spalls) < self.spall_slots:
            dprint('You have an available spall slot')
            dprint('would you like to learn or replace a spall?')
            lorp = ['learn', 'replace', 'nope'] # lorp: Learn or Replace
            for i in range(3):
                print(f'{i + 1}: {lorp[i]}')
            ans = input()
            if ans in ['0', '1', 'l', 'L', 'Learn', 'learn']: # if learn new
                self.add_spall(learnables)
            elif ans in ['2', 'r', 'R', 'replace', 'Replace', 'repl', 'Repl', '3']: # if replace known
                self.remove_spall()
                self.add_spall(learnables)
            else:
                dprint('Ok maybe next time!')
                break
    
    def remove_spall(self):
        spall_int = get_validated_input('Replace which spall? ',self.known_spalls)
        self.known_spalls.remove(self.known_spalls[spall_int - 1]) # remove the chosen spall at valid position

    def add_spall(self, learnables):
        spall_int = get_validated_input('Add which spall? ',learnables)
        self.known_spalls.append(learnables[spall_int - 1]) # append the selected choice to known spalls
        dprint(f'{self.name} has learned the spall {self.known_spalls[-1].name}!')

    def choose_spall(self, spalls):
        user = get_validated_input('Which spall do you want to use? ', spalls)
        if user == None:
            return
        return spalls[user - 1]
    
    def use_item(self, enemy, xp_thresholds):
        useables = [item for item in self.inventory.contents if item.can_use]
        if len(useables) != 0:
            list_int = get_validated_input('',useables)
            to_use = useables[list_int - 1]
            to_use.use(self, enemy, xp_thresholds)
            if to_use == 0:
                self.inventory.remove_item(to_use)
            else:
                self.inventory.contents[to_use] -= 1
        else:
            dprint('Your inventory is empty. ')

    def run(self):
        small = int((self.accuracy * 100) + (20 - self.agi))
        big = int(60 + self.agi)
        if random.randint(0, small) > random.randint(0, big):
            return True
        return False

-- domain selection
    current as of: dev 0.0.35
    location: worlds.py in WorldOne.create_character()

udomain = input('Choose your Domain \n1: Fighter \n2: Mage \n3: Pugilist\n')
        # dbugp = 7 # For debugging purposes. Adjust to test certain story points with varying accuracy (value matches stpry progress). 

        if udomain in ['','f','F','1','0','fighter','Fighter','FIGHTER','fight','Fight','FIGHT','1: Fighter','idk']:
            pc = Fighter(pname, pgender, 10, 2, 0, 1, .69, 3)
            return pc
        if udomain in ['2','m','M','mage','Mage','MAGE','w','magic','2: Mage ','yay, spells']:
            pc = Mage(pname, pgender, 10, 1, 0, 1, .59, 4)
            return pc
        if udomain in ['3','p','P','pugilist','Pugilist','PUGILIST','pug','3: Pugilist','punchy boy','Iskhan']:
            pc = Pugilist(pname, pgender, 10, 2, 0, 1, .65, 2)
            return pc
        if udomain == 'admin': 
            pc = Mage(pname, pgender, 5000, 600, 0, 100, .96, 10000)
            return pc
        if udomain == 'debug':
            # pc = Fighter(pname, pgender, 10 + (2 * dbugp), 1 + dbugp, 95 + round(1.16 ** dbugp) + (200 // dbugp + 1), dbugp // 2, .88, 3 * dbugp, dbugp)
            pc = Fighter(pname, pgender, 23, 4, 300, 3, .755, 30, 7) # adjust according to stats by level in experiments
            return pc
        else:
            pc = Fighter(pname, pgender, 6, 1, 0, 1, .4, 0)
            return pc

-- Domain based skill display
    current as of: dev 0.0.28
    location: misc.py in Hospital.give_info() and Marketplace.give_info()

        if isinstance(player, Fighter):
            print('Skills: ')
            for skill in player.known_skills:
                print(f'{skill.name.capitalize()} --> cost: {skill.cost}, cooldown: {skill.cooldown - skill.downtime}/{skill.cooldown}, power: {skill.damage}')
        if isinstance(player, Mage):
            print('Spells: ')
            for spell in player.known_spells:
                print(f'{spell.name.capitalize()} --> cost: {spell.cost}, cooldown: {spell.cooldown - spell.downtime}/{spell.cooldown}, power: {spell.damage}')
        if isinstance(player, Pugilist):
            print('Spalls: ')
            for spall in player.known_spalls:
                print(f'{spall.name.capitalize()} --> cost: {spall.cost}, cooldown: {spall.cooldown - spall.downtime}/{spall.cooldown}, power: {spall.damage}')

-- domain oriented battle
    current as of: 0.0.28
    location: battle.py in Battle.regular() and Battle.boss() and Battle.story()

            if self.active_player.title == 'Fighter':
                self.handle_fighter_turn(seconds)
            elif self.active_player.title == 'Mage':
                self.handle_mage_turn(seconds)
            elif self.active_player.title == 'Pugilist':
                self.handle_pugilist_turn(seconds)
            elif self.active_player.title == 'tamer':
                self.handle_tamer_turn(seconds)

-- domain turns in battle
    current as of dev 0.0.21
    location battle.py in Battle


    def handle_mage_turn(self, seconds):
        if seconds % self.active_player.agi == 0:
            # prompt for battle option
            for i in range(len(self.battle_options)):
                print(f'{i + 1}: {self.battle_options[i]}')    
            option = input()

            if option in ['','1','0','f','F','fight','Fight','FIGHT','attack','a','A','Y','y','yes']:
                # define target
                if len(self.active_monsters) == 1:
                    target = self.active_monsters[-1]
                else:
                    dprint('target which monster')
                    target = get_list_option(self.active_monsters)
                
                # adjust mage spell cooldown ??? 
                for spell in self.active_player.known_spells:
                    if spell.downtime < spell.cooldown:
                        spell.downtime += 1

                # attack
                self.active_player.attack(target, self.xp_thresholds)
                # update active monsters
                if not target.is_alive():
                    self.active_monsters.remove(target)

            elif option in ['2','Skill','skill','s','S','spell','Spell','SKILL','SPELL']:
                # define the target
                if len(self.active_monsters) == 1:
                    target = self.active_monsters[-1]
                else:
                    dprint('target which monster')
                    target = get_list_option(self.active_monsters)
                # special attack
                self.active_player.special_attack(target, self.xp_thresholds)
                # update active monsters
                if not target.is_alive():
                    self.active_monsters.remove(target)
            
            elif option in ['3', 'item', 'Item', 'i', 'I', 'bag', 'Bag', 'b', 'B']:
                # define the target
                if len(self.active_monsters) == 1:
                    target = self.active_monsters[-1]
                else:
                    dprint('target which monster')
                    target = get_list_option(self.active_monsters)
                # use item
                self.active_player.use_item(target, self.xp_thresholds)
                # update active monsters
                if not target.is_alive():
                    self.active_monsters.remove(target)
            
            else:
                escape = 0
                for i in range(len(self.active_monsters)):
                    if self.active_player.run():
                        escape += 1
                if len(self.active_monsters) == 1 and escape == 1:
                    dprint(f'{self.active_player.name} escaped!')
                    self.active_monsters.clear()
                elif len(self.active_monsters) == 2:
                    if escape == 1:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 2:
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                elif len(self.active_monsters) == 3:
                    if escape == 2:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 3:
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                elif len(self.active_monsters) == 4:
                    if escape == 2:
                        dprint(f'{self.active_player.name} barely escaped with their life!')
                        self.active_monsters.clear()
                    elif escape == 3:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 4: 
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                elif len(self.active_monsters) > 4:
                    if escape >= 6:
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                    elif escape == 5:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 4:
                        dprint(f'{self.active_player.name} barely escaped with their life!')
                        self.active_monsters.clear()
                    elif escape == 3:
                        dprint('Wow... miracles really do happen!')
                        self.active_monsters.clear()
                else:
                    dprint(f'{self.active_player.name} failed their escape attempt.')

    def handle_pugilist_turn(self, seconds):
        if seconds % self.active_player.agi == 0:
            # prompt for battle option
            for i in range(len(self.battle_options)):
                print(f'{i + 1}: {self.battle_options[i]}')    
            option = input()

            if option in ['','1','0','f','F','fight','Fight','FIGHT','attack','a','A','Y','y','yes']:
                # define target
                if len(self.active_monsters) == 1:
                    target = self.active_monsters[-1]
                else:
                    dprint('target which monster')
                    target = get_list_option(self.active_monsters)
                
                # adjust pugilist spall cooldown ??? 
                for spall in self.active_player.known_spalls:
                    if spall.downtime < spall.cooldown:
                        spall.downtime += 1

                # attack
                self.active_player.attack(target, self.xp_thresholds)
                # update active monsters
                if not target.is_alive():
                    self.active_monsters.remove(target)

            elif option in ['2','Skill','skill','s','S','spall','Spall','SKILL','SPALL','spell']:
                # define the target
                if len(self.active_monsters) == 1:
                    target = self.active_monsters[-1]
                else:
                    dprint('target which monster')
                    target = get_list_option(self.active_monsters)
                # special attack
                self.active_player.special_attack(target, self.xp_thresholds)
                # update active monsters
                if not target.is_alive():
                    self.active_monsters.remove(target)
            
            elif option in ['3', 'item', 'Item', 'i', 'I', 'bag', 'Bag', 'b', 'B']:
                # define the target
                if len(self.active_monsters) == 1:
                    target = self.active_monsters[-1]
                else:
                    dprint('target which monster')
                    target = get_list_option(self.active_monsters)
                # use item
                self.active_player.use_item(target, self.xp_thresholds)
                # update active monsters
                if not target.is_alive():
                    self.active_monsters.remove(target)
            
            else:
                escape = 0
                for i in range(len(self.active_monsters)):
                    if self.active_player.run():
                        escape += 1
                if len(self.active_monsters) == 1 and escape == 1:
                    dprint(f'{self.active_player.name} escaped!')
                    self.active_monsters.clear()
                elif len(self.active_monsters) == 2:
                    if escape == 1:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 2:
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                elif len(self.active_monsters) == 3:
                    if escape == 2:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 3:
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                elif len(self.active_monsters) == 4:
                    if escape == 2:
                        dprint(f'{self.active_player.name} barely escaped with their life!')
                        self.active_monsters.clear()
                    elif escape == 3:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 4: 
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                elif len(self.active_monsters) > 4:
                    if escape >= 6:
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                    elif escape == 5:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 4:
                        dprint(f'{self.active_player.name} barely escaped with their life!')
                        self.active_monsters.clear()
                    elif escape == 3:
                        dprint('Wow... miracles really do happen!')
                        self.active_monsters.clear()
                else:
                    dprint(f'{self.active_player.name} failed their escape attempt.')

    def handle_tamer_turn(self, seconds):
        if seconds % self.active_player.agi == 0:
            # prompt for battle option
            for i in range(len(self.battle_options)):
                print(f'{i + 1}: {self.battle_options[i]}')    
            option = input()

            if option in ['','1','0','f','F','fight','Fight','FIGHT','attack','a','A','Y','y','yes']:
                # define target
                if len(self.active_monsters) == 1:
                    target = self.active_monsters[-1]
                else:
                    dprint('target which monster')
                    target = get_list_option(self.active_monsters)
                
                # adjust player skill cooldown ??? 
                for skill in self.active_player.known_skills:
                    if skill.downtime < skill.cooldown:
                        skill.downtime += 1

                # attack
                self.active_player.attack(target, self.xp_thresholds)
                # update active monsters
                if not target.is_alive():
                    self.active_monsters.remove(target)

            elif option in ['2','Skill','skill','s','S','spell','Spell','SKILL','SPELL']:
                # define the target
                if len(self.active_monsters) == 1:
                    target = self.active_monsters[-1]
                else:
                    dprint('target which monster')
                    target = get_list_option(self.active_monsters)
                # special attack
                self.active_player.special_attack(target, self.xp_thresholds)
                # update active monsters
                if not target.is_alive():
                    self.active_monsters.remove(target)
            
            elif option in ['3', 'item', 'Item', 'i', 'I', 'bag', 'Bag', 'b', 'B']:
                # define the target
                if len(self.active_monsters) == 1:
                    target = self.active_monsters[-1]
                else:
                    dprint('target which monster')
                    target = get_list_option(self.active_monsters)
                # use item
                self.active_player.use_item(target, self.xp_thresholds)
                # update active monsters
                if not target.is_alive():
                    self.active_monsters.remove(target)
            
            else:
                escape = 0
                for i in range(len(self.active_monsters)):
                    if self.active_player.run():
                        escape += 1
                if len(self.active_monsters) == 1 and escape == 1:
                    dprint(f'{self.active_player.name} escaped!')
                    self.active_monsters.clear()
                elif len(self.active_monsters) == 2:
                    if escape == 1:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 2:
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                elif len(self.active_monsters) == 3:
                    if escape == 2:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 3:
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                elif len(self.active_monsters) == 4:
                    if escape == 2:
                        dprint(f'{self.active_player.name} barely escaped with their life!')
                        self.active_monsters.clear()
                    elif escape == 3:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 4: 
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                elif len(self.active_monsters) > 4:
                    if escape >= 6:
                        dprint(f'{self.active_player.name} escaped!')
                        self.active_monsters.clear()
                    elif escape == 5:
                        dprint(f'{self.active_player.name} made a narrow escape!')
                        self.active_monsters.clear()
                    elif escape == 4:
                        dprint(f'{self.active_player.name} barely escaped with their life!')
                        self.active_monsters.clear()
                    elif escape == 3:
                        dprint('Wow... miracles really do happen!')
                        self.active_monsters.clear()
                else:
                    dprint(f'{self.active_player.name} failed their escape attempt.')

